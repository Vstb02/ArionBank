@page "/Credit"
@using ArionBank.Account.Service.Card
@using ArionBank.Account.Service.Credit
@using ArionBank.Application.Models
@using System.Security.Claims
@using ArionBank.Domain.Enums
@inject ICardService _cardService
@inject ICreditService _creditService
@inject NavigationManager NavigationManager

@if (ShowErrors)
{
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 5">
        <div id="liveToast" class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">Ошибка оформления вклада</strong>
                <small>@DateTime.Now.ToString("D")</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Закрыть"></button>
            </div>
            <div class="toast-body">
                <p>@Error</p>
            </div>
        </div>
    </div>
}

<main class="col-lg-8" id="main">
    <div class="h1 text-center" style="margin-top: 50px; font-size: 32px;">Оформление кредита</div>
    <div class="select" style="margin-top: 60px;">
                       <span class="header-credit">Счет</span>
            <select @bind="creditModel.CardId" id="mInput" class="form-select mInput" aria-label="Default select example">
                        <option value="">Выбрать счет</option>
                        @if(cardList.Cards != null)
                        @foreach(var Item in cardList.Cards)
                        {
                            if(Item.Type == TypesCard.Debit)
                            {
                                <option value="@Item.Id">@Item.Number - @Item.PaymentSystem</option>
                            }
                        }
                    </select> 
            <div class="mt-3">
                <span>Сумма, которую вы хотите взять</span>
                <input @bind="creditModel.Ammount" id="mInput" type="text" class="form-control mInput-2">
                <span>Средняя заработная плата</span>
                <input @bind="creditModel.AverageSalary" id="mInput" type="text" class="form-control mInput-2">

                 <div class="form-group">
                    <span>Место работы</span>
                    <input type="text" id="mInput" Class="form-control mInput2" @bind="creditModel.PlaceOfWork" />
                </div>
                 <div class="form-group">
                    <span>Укажите цель кредитаа</span>
                    <input type="text" id="mInput" Class="form-control mInput2" @bind="creditModel.Purpose" />
                </div>

                <span>На какой срок</span>
                <input @bind="creditModel.Term" id="mInput" type="date" min="@DateTime.Now.Year-@DateTime.Now.Month-@DateTime.Now.Day" max="(@DateTime.Now.Year + 5)-@DateTime.Now.Month-@DateTime.Now.Day" class="form-control mInput-2">
                <span class="remark">Процентная ставка по кредиту составляет от 13% до 25%,
                    окончательный результат будет сообщен после проверки</span>
                <div @onclick="CreditHanlder" class="btn-custom-2 w-10 mt-2 text-center" style="width: 200px; margin: auto;">Продолжить</div>
            </div>
    </div>
</main>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string Error;
    private bool ShowErrors;
    private Guid UserId;
    CreateCreditModel creditModel = new CreateCreditModel();
    CardListModel cardList = new CardListModel();

    protected override async Task OnInitializedAsync()
    {
        creditModel.Term = DateTime.Now;
        var authState = await authenticationStateTask;
        var user = authState.User;

        string id = string.Empty;
        try
        {
            id = user.Claims.Where(x => x.Type == ClaimTypes.NameIdentifier).FirstOrDefault().Value;
            UserId = Guid.Parse(id);
        }
        catch{
            Error = "Произошла непредвиденная ошибка";
            ShowErrors = true;
        }
        creditModel.UserId = UserId;
        cardList = await _cardService.GetCardList(UserId);
    }
    private async Task CreditHanlder()
    {
        var result = await _creditService.CreateCredit(creditModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Error = result.Errors;
            ShowErrors = true;
        }
    }
}
