@page "/"
@using ArionBank.Account.Components
@using ArionBank.Account.Service.Account
@using ArionBank.Account.Service.Deposit
@using ArionBank.Account.Service.Operation
@using ArionBank.Application.Models
@using System.Security.Claims
@using ArionBank.Domain.Enums
@inject IAccountService AuthService
@inject NavigationManager NavigationManager
@inject IDepositService _depositService
@inject IJSRuntime JS
@inject IOperationService _operationService
<AuthorizeView>
    <Authorized>
        <main class="col-lg-8" id="main">
                <div class="row py-3">
                    <div class="col-lg-7">
                        <span class="invest-h0">Перевести</span>
                        <div class="row mt-2">
                            <div class="col-lg-9">
                                <form action="/operation">
                                    <button class="btn-custom w-100 mt-2 text-center">Между своими клиентами</button>
                                </form>
                                <form action="/operationWp">
                                    <button class="btn-custom w-100 mt-2 text-center">Клиенту другого банка</button>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 col-12">
                    <span class="invest-h0">Ваши вклады</span>
                        <div class="row align-items-center mt-3">
                            <div class="col-lg-2 col-1  text-center">
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                    aria-hidden="true" role="img" width="37px" height="37px "
                                    preserveAspectRatio="xMidYMid meet" viewBox="0 0 16 16">
                                    <g fill="#8429F7">
                                        <path d="M9.778 9.414A2 2 0 1 1 6.95 6.586a2 2 0 0 1 2.828 2.828z" />
                                        <path
                                            d="M2.5 0A1.5 1.5 0 0 0 1 1.5V3H.5a.5.5 0 0 0 0 1H1v3.5H.5a.5.5 0 0 0 0 1H1V12H.5a.5.5 0 0 0 0 1H1v1.5A1.5 1.5 0 0 0 2.5 16h12a1.5 1.5 0 0 0 1.5-1.5v-13A1.5 1.5 0 0 0 14.5 0h-12zm3.036 4.464l1.09 1.09a3.003 3.003 0 0 1 3.476 0l1.09-1.09a.5.5 0 1 1 .707.708l-1.09 1.09c.74 1.037.74 2.44 0 3.476l1.09 1.09a.5.5 0 1 1-.707.708l-1.09-1.09a3.002 3.002 0 0 1-3.476 0l-1.09 1.09a.5.5 0 1 1-.708-.708l1.09-1.09a3.003 3.003 0 0 1 0-3.476l-1.09-1.09a.5.5 0 1 1 .708-.708zM14 6.5v3a.5.5 0 0 1-1 0v-3a.5.5 0 0 1 1 0z" />
                                    </g>
                                </svg>
                            </div>
                            <div class="col-lg-10 col-11">
                                <span class="invest-h1">Сберегательный счет</span>
                                <div class="d-flex justify-content-between">
                                    <span class="invest-h2">№ счета</span>
                                    <span class="invest-h2 text-end">@deposit.Number</span>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-12">
                                <div class="d-flex justify-content-between">
                                    <span class="card-h4 ">Процентная ставка</span>
                                    <span class="card-h4 text-end">8%</span>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="d-flex justify-content-between">
                                    <span class="card-h5 p-0 m-0">Баланс</span>
                                    <span class="card-h5 p-0 m-0 text-end">@deposit.Balance</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <span class="invest-h0 py-3 text-start">Услуги</span>
                    <div class="row">
                            <div class="col-4">
                                <form action="/credit">
                                    <button class="btn-custom-2 w-100 mt-2 text-center">Оформить кредит</button>
                                </form>
                            </div>
                            <div class="col-4">
                                <form action="Deposit">
                                    <button class="btn-custom-2 w-100 mt-2 text-center">Оформить вклад</button>
                                </form>
                            </div>
                            <div class="col-4">
                                <form action="/card">
                                    <button class="btn-custom-2 w-100 mt-2 text-center"> Выпустить карту</button>
                                </form>
                            </div>
                    </div>
                </div>
                <div class="row col-md-8">
                    <span class="invest-h0 py-3 mt-4 text-start">Последние операции</span>
                @if (@opHistrory.List != null)
                {
                    @foreach (var Item in opHistrory.List)
                    {
                        <div class="row" style="justify-content: space-between;">
                            <div class="col-4">
                                @if(@Item.Image != null)
                                {
                                    <img class="rounded-circle" src="data:image/jpeg;base64,@(Convert.ToBase64String(@Item.Image))" loading="lazy" />
                                }
                                else
                                {
                                    <img src="img/user-avatar.png" class="rounded-circle" alt="">
                                }
                            </div>
                            @if(@Item.Type == @TypesOperation.Sent)
                            {
                            <div class="col-8" style="text-align: end;">
                                <span class="d-block">@Item.Name</span>
                                <span class="d-block text-danger">-@Item.Ammount ₽</span>
                            </div>
                            }
                            else
                            {
                            <div class="col-8" style="text-align: end;">
                                <span class="d-block">@Item.Name</span>
                                <span class="d-block text-success">+@Item.Ammount ₽</span>
                            </div>
                            }
                        </div>
                    }
                }
                </div>
            </main>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    DepositModel deposit = new DepositModel();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private List<string> Error;
    private bool ShowErrors;
    private Guid UserId;
    private OperationHistoryListModel opHistrory = new OperationHistoryListModel();
    private UserOperationModel userOperationModel = new UserOperationModel();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if(user.Identity.IsAuthenticated)
        {
            string id = String.Empty;
            try
            {
                var claimId = user.Claims.Where(x => x.Type == ClaimTypes.NameIdentifier).ToList();
                if(claimId.Count > 0)
                {
                    id = claimId.FirstOrDefault().Value;
                }
            }
            catch
            {
                Error.Append("Произошла непредвиденная ошибка");
                ShowErrors = true;
            }
            if(id != string.Empty)
            {
                Guid userId = Guid.Empty;
                try
                {
                    userId = Guid.Parse(id);   
                }
                catch{
                    Error.Append("Произошла непредвиденная ошибка");
                    ShowErrors = true;
                }
                userOperationModel.UserId = userId;
                userOperationModel.Date = DateTime.Now;
                opHistrory = await _operationService.OperationHistoryByUser(userOperationModel);
                deposit = await _depositService.DepositByUserId(userId);
            }
        }
    }
}
